<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Bots work, but are fairly dumb. The mod used is PeZBOT v011p.

There's two other bot mods out there called "Bot Warfare" and "RSE bots".
Bot Warfare is hot garbage, but Bots_RSE isn't too bad.
In my testing they're more wall hacky than PeZBot which is why PeZbot is the default.
I've added RSE Bots to the mods folder and can be loaded through the normal multiplayer, but for simplicity, this launcher only deals with PezBot.

#######################################################
To load bots, first launch the game using "Multiplayer - Bots" or select the PeZBOT mod in the mod list.

Start a game as uhsual, when in game bots can be added via te chat command key (Default "B") or through console using commands:
"svr_pezbots #"	        - Spawn a number of bots
"svr_pezbots_skill #.#" - Bot skill level, a decimal between 0 to 1
"svr_pezbots_team ***"  - Default team for the bots to join "axis", "allies" or "autoassign"

#######################################################

Multiplayer - Zombies isn't your typical Zombie mode since this game predates the original Zombies (It's also an Infinity Ward game, not Treyarch).

This is handled by a mod called "Reign of the Undead - Zombies", it's about the best one I've tried for COD4 as the others are usually way more buggy.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BQEBBAEBAgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCQICCQICCQICCQICCQICCQICCQIC
        CQICCQIFGgUKMAoPRw4RTw8RTg9Vr1Wr16qRy48vnTARTg8RTw8NPQwIJwgEEgQCCQICCQICCQICCQIC
        CQICCQICCQICCQICCQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAgABBAEBBAEBBAEBBgFA
        pUAdihsBBgEBBAEBBAEBAgEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCQICCQICCQIC
        CQICCQICCQICCQICCQICCQICDAMIJAcLMwoLMwoLMwoNPQyUzZOFxYMNPQwLMwoLMwoKLgkFGAUCCQIC
        CQICCQICCQICCQICCQICCQICCQICCQICCQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AQAAAQAAAQAAAQAHJAcFGgUAAQAAAQAAAQAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACCQICCQICCQICCQICCQICCQICCQICCQICCQICCQIEEgQEFQQEFQQEFQQEFQQVYxMVYxMEFQQEFQQE
        FQQEFQQDDQMCCQICCQICCQICCQICCQICCQICCQICCQICCQICCQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>